<jittershader name="depth">
	<description>
	shader to capture depth and linearize values (0-1)
	</description>

	<param name="clearColor" type="vec3" />
	<!--param name="lightPosition" type="vec3" default="0. 0. 2."/-->
	<param name="clipPlane" type="vec3" default="0. 0. 1."/>
	<param name="loops" type="int" default="10" />
	<param name="stepSize" type="float" default="0.2" />
	<param name="sliceSize" type="float" default="0.2" />
	<param name="clipPlaneDepth" type="float" default="0.0" />

	<param name="frontFace" type="int" default="0" />
	<param name="backFace" type="int" default="1" />
	<param name="intensityVol" type="int" default="2" />
	<!--param name="gradientVol" type="int" default="3" /-->
	<language name="glsl" version="1.0">
		<bind param="clearColor" program="fp" />
		<!--bind param="lightPosition" program="fp" /-->
		<bind param="clipPlane" program="fp" />
		<bind param="loops" program="fp" />
		<bind param="stepSize" program="fp" />
		<bind param="sliceSize" program="fp" />
		<bind param="clipPlaneDepth" program="fp" />

		<bind param="frontFace" program="fp" />
		<bind param="backFace" program="fp" />
		<bind param="intensityVol" program="fp" />
		<!--bind param="gradientVol" program="fp" /-->
		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

varying vec2 vfrontFaceTexCoord;
varying vec2 vbackFaceTexCoord;

void main (void){
    vfrontFaceTexCoord = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    vbackFaceTexCoord = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
	gl_Position = ftransform();
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

uniform int loops;
uniform float stepSize, sliceSize;
uniform sampler2DRect frontFace;
uniform sampler2DRect backFace;
uniform sampler3D intensityVol; //3DTexture containing brightness
uniform sampler3D gradientVol; //3DTexture containing gradient direction and magnitude

uniform vec3 clearColor,lightPosition, clipPlane;
uniform float clipPlaneDepth;

varying vec2 vfrontFaceTexCoord;
varying vec2 vbackFaceTexCoord;

void main (void){
	// starting position of the ray is stored in the texture coordinate
	vec3 start = texture2DRect(frontFace,vfrontFaceTexCoord).xyz;
	if(start.x != 0. || start.y != 0. || start.z != 0.){
		vec3 backPosition = texture2DRect(backFace,vbackFaceTexCoord).xyz;
		vec3 dir = backPosition - start;
		float len = length(dir);
		dir = normalize(dir);

		//next see if clip plane intersects ray
		if (clipPlaneDepth > -0.5) {
			gl_FragColor.rgb = vec3(1.0,0.0,0.0);
			//next, see if clip plane faces viewer
			bool frontface = (dot(dir , clipPlane) > 0.0);
			//next, distance from ray origin to clip plane
			float dis = dot(dir,clipPlane);
			if (dis != 0.0  )  dis = (-clipPlaneDepth - dot(clipPlane, start.xyz-0.5)) / dis;
			//we set "len = 0.0"  instead of "discard" or "return": return fails on 2006MacBookPro10.4ATI1900, discard fails on MacPro10.5NV8800 will not discard
			if ((frontface) && (dis > len)) len = 0.0;
			if ((!frontface) && (dis < 0.0)) len = 0.0;
			if ((dis > 0.0) && (dis < len)) {
				if (frontface) {
					start = start + dir * dis;
				} else {
					backPosition =  start + dir * (dis);
				}
				dir = backPosition - start;
				len = length(dir);
				dir = normalize(dir);
			}
		}

		vec3 deltaDir = dir * stepSize;
		vec4 colorSample,colAcc = vec4(0.0,0.0,0.0,0.0);
		float lengthAcc = 0.0;
		float opacityCorrection = stepSize/sliceSize;
		//We need to calculate the ray's starting position. We add a random
		//fraction of the stepsize to the original starting point to dither the output
		vec3 samplePos = start.xyz + deltaDir;
		//	vec3 samplePos = start.xyz + deltaDir* (fract(sin(gl_FragCoord.x * 12.9898 + gl_FragCoord.y * 78.233) * 43758.5453));
		for(int i = 0; i < loops; i++) {
			colorSample = texture3D(intensityVol, vec3(vec4(samplePos, 1.0) * gl_TextureMatrix[3]));
		//		colorSample = texture3D(intensityVol, samplePos);
		//		colorSample.a = 1.0-pow((1.0 - colorSample.a), opacityCorrection);
			colorSample.a = 1.0-pow((1.0 - colorSample.r * colorSample.g * colorSample.b), opacityCorrection);
			colorSample.rgb *= colorSample.a;
			//accumulate color
			colAcc= (1.0 - colAcc.a) * colorSample + colAcc;
			samplePos += deltaDir;
			lengthAcc += stepSize;
			// terminate if opacity > 1 or the ray is outside the volume
			if ( lengthAcc >= len || colAcc.a > 0.95 )
				break;
		}
		colAcc.a = colAcc.a/0.95;
		if ( colAcc.a < 1.0 ){
			colAcc.rgb = mix(clearColor,colAcc.rgb,colAcc.a);
        }
		gl_FragColor = colAcc;
	} else {
		gl_FragColor = vec4(clearColor.x, clearColor.y, clearColor.z, 1);
	}
//	gl_FragColor = texture2DRect(frontFace,vfrontFaceTexCoord);
//	gl_FragColor = vec4(clearColor.x, clearColor.y, clearColor.z, 1);

}
]]>
		</program>
	</language>
</jittershader>
