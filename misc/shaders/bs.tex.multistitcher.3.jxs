<jittershader name="sar.edge.jxs">
	<description>Spatial Augmented Reality Projection System - Shader</description>
	<param name="tex1" type="int" default="1" />
	<param name="tex2" type="int" default="2" />
	<param name="tex3" type="int" default="3" />
	<language name="glsl" version="1.2">
		<bind param="tex1" program="fp" />
		<bind param="tex2" program="fp" />
		<bind param="tex3" program="fp" />
		<bind param="screen_m_matrix" program="vp" />
		<bind param="cam0_pos" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

#version 120

varying vec4 texcoord0;

void main(void)
{
	// perform standard transform on vertex
	gl_Position = ftransform();

 	texcoord0 = gl_MultiTexCoord0;
}

]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

varying vec4 texcoord0;

// samplers
uniform sampler2DRect tex1;
uniform sampler2DRect tex2;
uniform sampler2DRect tex3;

// entry point
void main()
{

	vec4 color;

	vec4 newcoord =texcoord0;
	newcoord.s = mod(texcoord0.s, 0.333333333) * 3.0;

	color = (texcoord0.s < (3.0 * 0.333333333))?texture2DRect(tex3, (gl_TextureMatrix[3] * newcoord).st):color;
	color = (texcoord0.s < (2.0 * 0.333333333))?texture2DRect(tex2, (gl_TextureMatrix[2] * newcoord).st):color;
	color = (texcoord0.s < (1.0 * 0.333333333))?texture2DRect(tex1, (gl_TextureMatrix[1] * newcoord).st):color;

	//if(texcoord0.s < 0.166666){
	//	color = texture2DRect(tex0, (gl_TextureMatrix[0] * newcoord).st);
	//}

	gl_FragColor = color;

}

]]>
		</program>
	</language>
</jittershader>
