<jittershader name="bs.portal.spatial.se.projection.angle.fast.6.jxs">
	<description>SPARCK - multi projection - Shader</description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />

	<param name="mode" type="int" default="0" />
	<param name="stage_mode" type="int" default="0" />
	<param name="projection_mode" type="float" default="0" />

	<param name="cam0_pos" type="vec3" default="0. 0. 0." />
	<param name="cam0_v_matrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="cam0_p_matrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />

	<param name="beamer_enable" type="float" default="1. 1. 1. 1. 1. 1." />
	<param name="beamer_count" type="int" default="0" />

	<param name="beamer_color" type="vec4" default="1. 0. 0. 1. 0. 1. 0. 1. 0. 0. 1. 1. 0. 1. 1. 1. 1. 0. 1. 1. 1. 1. 0. 1." />
	<param name="offColor" type="vec4" default="0. 0. 0. 1." />

	<param name="beamer_pos" type="vec3" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="beamer_dir" type="vec3" default="0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 1." />
	<param name="beamer_up" type="vec3" default="1. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0." />

	<param name="beamer_m_matrix" type="mat4" default="1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1." />
	<param name="beamer_v_matrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="beamer_p_matrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="world_matrix" type="mat4" state="WORLD_MATRIX" />
	<param name="viewport_matrix" type="mat4" default="0.5 0. 0. 0. 0. 0.5 0. 0. 0. 0. 0.5 0. 0.5 0.5 0.5 0." />

	<param name="bevel_size" type="float" default="0. 0. 0. 0. 0. 0." />
	<param name="bevel_curve" type="float" default="1. 1. 1. 1. 1. 1." />
	<param name="bevel_round" type="int" default="0 0 0 0 0 0" />

	<param name="angle_mode" type="float" default="0.0" />

	<param name="angle_limit" type="float" default="0. 0. 0. 0. 0. 0." />
	<param name="angle_falloff" type="float" default="0.3 0.3 0.3 0.3 0.3 0.3" />
	<param name="angle_limit_low" type="float" default="0. 0. 0. 0. 0. 0." />
	<param name="angle_limit_high" type="float" default="0.2 0.2 0.2 0.2 0.2 0.2" />

	<param name="far_clip" type="float" default="0. 0. 0. 0. 0. 0." />

	<param name="blend_spread" type="float" default="1.0" />
	<param name="back_blend" type="float" default="1." />
	<param name="distance_influence" type="float" default="1." />

	<param name="interpolation_correction" type="float" default="0.1" />

	<param name="collada_factor" type="mat4" default="1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1." />
	<param name="gradient" type="float" default="0. 0.024453 0.048907 0.07336 0.097813 0.122267 0.14672 0.171173 0.195627 0.22008 0.244533 0.268987 0.29344 0.31509 0.329438 0.343786 0.358133 0.372481 0.386829 0.401176 0.415524 0.429871 0.441664 0.449133 0.456602 0.464072 0.471541 0.47901 0.48648 0.493949 0.501418 0.508887 0.514397 0.519075 0.523754 0.528432 0.533111 0.53779 0.542468 0.547147 0.551825 0.556504 0.561149 0.563628 0.566107 0.568586 0.571065 0.573544 0.576023 0.578502 0.580981 0.58346 0.585939 0.588418 0.596003 0.604785 0.613568 0.622351 0.631133 0.639916 0.648698 0.657481 0.666263 0.675046 0.683828 0.692611 0.701393 0.710176 0.718958 0.727741 0.736524 0.745306 0.754089 0.762871 0.771654 0.780436 0.789219 0.798001 0.806784 0.815567 0.824349 0.833132 0.841914 0.850697 0.859479 0.868262 0.877044 0.885827 0.894609 0.903392 0.912175 0.920957 0.92974 0.938522 0.947305 0.956087 0.96487 0.973652 0.982435 0.991217 1." />
	<param name="blend_power" type="float" default="2.1" />
	<param name="blend_luminance" type="float" default="0.68" />

	<language name="glsl" version="1.2">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />

		<bind param="cam0_v_matrix" program="vp" />
		<bind param="cam0_p_matrix" program="vp" />

		<bind param="beamer_count" program="fp" />
		<bind param="beamer_color" program="fp" />

		<bind param="beamer_pos" program="fp" />
		<bind param="beamer_dir" program="fp" />

		<bind param="projection_mode" program="fp" />
		<bind param="stage_mode" program="fp" />
		<bind param="mode" program="fp" />

		<bind param="blend_spread" program="fp" />
		<bind param="angle_mode" program="fp" />

		<bind param="angle_limit_low" program="fp" />
		<bind param="angle_limit_high" program="fp" />

		<bind param="offColor" program="fp" />

		<bind param="viewport_matrix" program="vp" />
		<bind param="world_matrix" program="vp" />
		<bind param="collada_factor" program="vp" />

		<bind param="blend_power" program="fp" />
		<bind param="blend_luminance" program="fp" />
		<bind param="gradient" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

#version 120
uniform mat4 cam0_v_matrix;
uniform mat4 cam0_p_matrix;

uniform mat4 viewport_matrix;
uniform mat4 world_matrix;
uniform mat4 collada_factor;

varying vec3 normal;	// surface normal
varying vec3 worldPos;	// vertex world position

varying vec2 custom_texcoord;
varying vec4 camera_uv[1];		// camera uv position
varying vec2 camera_texcoord[1];// beamer texcoord

mat4 screen_m_matrix = world_matrix * collada_factor;

mat4 mvp0_matrix =  cam0_p_matrix * cam0_v_matrix * screen_m_matrix;

void main(void)
{
	// perform required transform on vertex
    gl_Position = vec4(vec2(gl_MultiTexCoord0).xy * 2. - 1., 0., 1.);

	normal = normalize(mat3(screen_m_matrix) * gl_Normal);
	worldPos = (screen_m_matrix * gl_Vertex).xyz;

	// apply the UV to texturcoordinate for the custom texture
    custom_texcoord = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);

	// calculate the UV-coordinate for camera 0
	vec4 clip0 = vec4(mvp0_matrix * gl_Vertex);
	vec4 device0 = vec4(clip0.x / clip0.w, clip0.y / clip0.w, clip0.z / clip0.w, 1.);
	vec4 screen0 = viewport_matrix * device0;
	camera_uv[0] = vec4(screen0.x, screen0.y, 0., 1.);

	// apply the UV to texturcoordinate for cam0
	camera_texcoord[0] = vec2(gl_TextureMatrix[1] * camera_uv[0]);
}

]]>
		</program>

		<program name="fp" type="fragment">
<![CDATA[
#version 120
#extension GL_ARB_texture_rectangle : enable

/*
	Multifunctional texture projection shader with full feature set.
*/
// samplers
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;

uniform float projection_mode;
uniform int stage_mode;
uniform int mode;

uniform int beamer_count;
uniform vec4 beamer_color[6];

uniform vec3 beamer_pos[6];
uniform vec3 beamer_dir[6];

uniform vec4 offColor; 	// off color

uniform float blend_spread;
uniform float angle_mode;

uniform float angle_limit_low[6];
uniform float angle_limit_high[6];

uniform float gradient[101];
uniform float blend_power;
uniform float blend_luminance;


// generated by the vertex shader

varying vec3 normal;	// surface normal
varying vec3 worldPos;	// vertex world position

varying vec2 custom_texcoord;
varying vec4 camera_uv[1];		// camera uv position
varying vec2 camera_texcoord[1];// beamer texcoord


float blendSpread = pow(((0.5 + (blend_spread)*10))*2., 4.);

// constants

const float PI = 3.1415926535897932384626433832795;
const float PI_HALF = PI / 2.0;
const vec4 WHITE = vec4( 1.0, 1.0, 1.0, 1.0);
const vec4 BLACK = vec4( 0.0, 0.0, 0.0, 1.0);

vec4 alphablend(vec4 src, vec4 dst){
	float outA = src.a + dst.a * (1.0 - src.a);
	return vec4((src.rgb * src.a + dst.rgb * dst.a * (1.0 - src.a))/outA, outA);
}

float softedgeblend(float _factor){
	// calculate alpha blend channel
	return (_factor < 0.5)?
			blend_luminance * pow((2. * _factor), blend_power):
			1. - (1. - blend_luminance) * pow(2. * (1. - _factor), blend_power);
}

// entry point
void main()
{
	float 	vangle[6];
	float 	spreadedAngle[6];

	int   	indexSort[6];

	vec3 	ray, raynormal;
	float 	angle, visible;
    int 	i, j;

  	for( i = 0; i < 6; i++){
		vangle[i] = 0.0;
		spreadedAngle[i] = 0.0;
		indexSort[i] = i;
	}

    //Calculating the factor of importance for each beamer
	for( i = 0; i < beamer_count; i++){
		// calculate the viewray from the camera to this fragment
		ray = beamer_pos[i] - worldPos;
		raynormal = normalize(ray);

		// calculate the angle between the surface normal and the projected beam.
		// 		rsp. the angle between the surface normal and the projector direction.
		angle = dot(normal, raynormal * (1.0 - angle_mode) + beamer_dir[i] * angle_mode);

		// sets from which side (back, both, front) it is visible
		angle = (projection_mode == 0.)? abs(angle):angle * projection_mode;

		//calculates the visibility factor for the angle;
		visible = angle * smoothstep(angle_limit_low[i], angle_limit_high[i], angle);

		vangle[i] = angle * visible;
	}

	//Sorting the viewport values
	int idxmax;

    for(i = (beamer_count - 1); i > 0; --i){
    	for(j = 0; j < i; j++){
	    	idxmax = (vangle[indexSort[j]] > vangle[indexSort[j+1]])? indexSort[j]: indexSort[j + 1];
    		indexSort[j + 1] = indexSort[j] + indexSort[j + 1] - idxmax;
    		indexSort[j] = idxmax;
    	}
    }

	//spread the angles and calc the blend factor for each of the four possible beams
	spreadedAngle[indexSort[0]] = vangle[indexSort[0]];
	spreadedAngle[indexSort[1]] = vangle[indexSort[1]] * pow((1. - vangle[indexSort[0]] + vangle[indexSort[1]]), blendSpread);
	spreadedAngle[indexSort[2]] = vangle[indexSort[2]] * pow((1. - vangle[indexSort[0]] + vangle[indexSort[2]]), blendSpread);
	spreadedAngle[indexSort[3]] = vangle[indexSort[3]] * pow((1. - vangle[indexSort[0]] + vangle[indexSort[3]]), blendSpread);
	spreadedAngle[indexSort[4]] = vangle[indexSort[4]] * pow((1. - vangle[indexSort[0]] + vangle[indexSort[4]]), blendSpread);
	spreadedAngle[indexSort[5]] = vangle[indexSort[5]] * pow((1. - vangle[indexSort[0]] + vangle[indexSort[5]]), blendSpread);

	float sumAngle =
		spreadedAngle[indexSort[0]] +
		spreadedAngle[indexSort[1]] +
		spreadedAngle[indexSort[2]] +
		spreadedAngle[indexSort[3]] +
		spreadedAngle[indexSort[4]] +
		spreadedAngle[indexSort[5]];

	// normalizing the blend factors for the first time
	// and multiply it with the curve.
	float normalizeOne = 1.0 / sumAngle;

	spreadedAngle[indexSort[0]] *= normalizeOne;
	spreadedAngle[indexSort[1]] *= normalizeOne;
	spreadedAngle[indexSort[2]] *= normalizeOne;
	spreadedAngle[indexSort[3]] *= normalizeOne;
	spreadedAngle[indexSort[4]] *= normalizeOne;
	spreadedAngle[indexSort[5]] *= normalizeOne;

	if(0 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[0] * 100.)]);
		gl_FragData[0] = vec4(texture2DRect(tex1, camera_texcoord[0]).rgb, gradientCorrected);
	}
	if(1 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[1] * 100.)]);
		gl_FragData[1] = vec4(texture2DRect(tex1, camera_texcoord[1]).rgb, gradientCorrected);
	}
	if(2 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[2] * 100.)]);
		gl_FragData[2] = vec4(texture2DRect(tex1, camera_texcoord[2]).rgb, gradientCorrected);
	}
	if(3 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[3] * 100.)]);
		gl_FragData[3] = vec4(texture2DRect(tex1, camera_texcoord[3]).rgb, gradientCorrected);
	}
	if(4 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[4] * 100.)]);
		gl_FragData[4] = vec4(texture2DRect(tex1, camera_texcoord[4]).rgb, gradientCorrected);
	}
	if(5 < beamer_count) {
		float gradientCorrected = softedgeblend(gradient[int(spreadedAngle[5] * 100.)]);
		gl_FragData[5] = vec4(texture2DRect(tex1, camera_texcoord[5]).rgb, gradientCorrected);
	}
}

]]>
		</program>
	</language>
</jittershader>
