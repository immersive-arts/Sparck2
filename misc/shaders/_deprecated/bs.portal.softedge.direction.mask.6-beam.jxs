<jittershader name="bs.portal.aug.dual.jxs">
	<description>Spatial Augmented Reality Projection System - Shader</description>
	<param name="mode" type="int" default="0" />
	<param name="stage_mode" type="int" default="0" />

	<param name="beamer_enable" type="int" default="0 0 0 0 0 0" />
	<param name="beamer_pos" type="vec3" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="beamer_color" type="vec4" default="0. 0. 1. 1. 0. 1. 0. 1. 1. 1. 0. 1. 0. 1. 1. 1. 1. 0. 1. 1. 0.5 0.5 1. 1." />

	<param name="beamer_v_matrix" type="mat4" />

	<param name="world_matrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." state="WORLD_MATRIX"/>

	<param name="collada_factor" type="mat4" default="1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1. 0. 0. 0. 0. 1." />

	<!-- param name="visible_blend" type="float" default="0.01" -->

	<param name="blend_angle" type="float" default="0.1" />
	<param name="gradient" type="float" default="0. 0.024453 0.048907 0.07336 0.097813 0.122267 0.14672 0.171173 0.195627 0.22008 0.244533 0.268987 0.29344 0.31509 0.329438 0.343786 0.358133 0.372481 0.386829 0.401176 0.415524 0.429871 0.441664 0.449133 0.456602 0.464072 0.471541 0.47901 0.48648 0.493949 0.501418 0.508887 0.514397 0.519075 0.523754 0.528432 0.533111 0.53779 0.542468 0.547147 0.551825 0.556504 0.561149 0.563628 0.566107 0.568586 0.571065 0.573544 0.576023 0.578502 0.580981 0.58346 0.585939 0.588418 0.596003 0.604785 0.613568 0.622351 0.631133 0.639916 0.648698 0.657481 0.666263 0.675046 0.683828 0.692611 0.701393 0.710176 0.718958 0.727741 0.736524 0.745306 0.754089 0.762871 0.771654 0.780436 0.789219 0.798001 0.806784 0.815567 0.824349 0.833132 0.841914 0.850697 0.859479 0.868262 0.877044 0.885827 0.894609 0.903392 0.912175 0.920957 0.92974 0.938522 0.947305 0.956087 0.96487 0.973652 0.982435 0.991217 1." />

	<language name="glsl" version="1.2">
		<bind param="mode" program="vp" />
		<bind param="stage_mode" program="fp" />

		<bind param="world_matrix" program="vp" />

		<bind param="beamer_enable" program="fp" />
		<bind param="beamer_pos" program="fp" />
		<bind param="beamer_color" program="fp" />
		<bind param="beamer_v_matrix" program="fp" />

		<bind param="collada_factor" program="vp" />

		<!-- bind param="visible_blend" program="fp" -->

		<bind param="blend_angle" program="fp" />
		<bind param="gradient" program="fp" />

		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

#version 120

uniform mat4 collada_factor;

uniform mat4 world_matrix;

varying vec3 normal;	// surface normal
varying vec3 worldPos;	// vertex world position

mat4 screen_m_matrix = world_matrix * collada_factor;

void main(void)
{

	// perform standard transform on vertex (general approach)
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

	//normal = gl_NormalMatrix * gl_Normal;
	normal = normalize(mat3(screen_m_matrix) * gl_Normal);
	worldPos = vec3(screen_m_matrix * gl_Vertex);
}

]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120
#extension GL_ARB_texture_rectangle : enable

uniform float gradient[101];

uniform int mode;
uniform int stage_mode;

uniform int beamer_enable[6];
uniform vec3 beamer_pos[6];
uniform vec4 beamer_color[6];

uniform mat4 beamer_v_matrix[6];

varying vec3 normal;	// surface normal
varying vec3 worldPos;	// vertex world position


//Softedge
uniform float blend_angle;

const float PI = 3.1415926535897932384626433832795;
const vec4 WHITE = vec4( 1.0, 1.0, 1.0, 1.0);
const vec4 BLACK = vec4( 0.0, 0.0, 0.0, 1.0);

const vec3 beamer_default = vec3(0.0, 0.0, 1.0);


// entry point
void main()
{

	float angle[6];
	float angleSorted[6];
	int   indexSort[6];

    int i, j;

    //Calculating the angle on which the beamer-beams hit the surface
	for( i = 0; i < 6; i++){
		angle[i] = (beamer_enable[i] == 1)?acos(dot(normal, normalize(beamer_v_matrix[i] * beamer_default))):PI;
		angleSorted[i] = 0;
		indexSort[i] = i;
	}

	int idxmax;

	//Sorting the angles
	float tmp;
    for(i = 5; i > 0; --i){
    	for(j = 0; j < i; j++){
	    	idxmax = (angle[indexSort[j]] <= angle[indexSort[j+1]])? indexSort[j]: indexSort[j + 1];
    		indexSort[j + 1] = indexSort[j] + indexSort[j + 1] - idxmax;
    		indexSort[j] = idxmax;
    	}
    }

	float angleRange = blend_angle;

	//calculation the difference between the first three beams
	float firstDiff = angle[indexSort[1]] - angle[indexSort[0]];
	float secondDiff = angle[indexSort[2]] - angle[indexSort[0]];

	//calc the factor for each of the three possible beams
	float firstRange = 1.0 - 1.0 / angleRange * clamp(firstDiff, 0.f, angleRange);
	float secondRange = 1.0 - 1.0 / angleRange * clamp(secondDiff, 0.f, angleRange);

	float sumRange = 1.0 + firstRange + secondRange;

	//The sum of the following factors are equals 1.0
	angleSorted[indexSort[0]] = 1.0 / sumRange;
	angleSorted[indexSort[1]] = angleSorted[indexSort[0]] * firstRange;
	angleSorted[indexSort[2]] = angleSorted[indexSort[0]] * secondRange;

	// calulate the color mode
	if(mode == 0){
		if(stage_mode == 0){
			gl_FragColor =  beamer_color[indexSort[0]] * angleSorted[indexSort[0]] +
							beamer_color[indexSort[1]] * angleSorted[indexSort[1]] +
							beamer_color[indexSort[2]] * angleSorted[indexSort[2]];
		}else if(stage_mode > 1){
			int idx = stage_mode - 2;
			float gradientCorrected = gradient[int(angleSorted[idx] * 100.)];
			gl_FragColor = WHITE * gradientCorrected;
		}
	}else if(mode > 0){
		int idx = mode - 1;
		float gradientCorrected = gradient[int(angleSorted[idx] * 100.)];
		gl_FragColor = WHITE * gradientCorrected;
	}

}

]]>
		</program>
	</language>
</jittershader>
