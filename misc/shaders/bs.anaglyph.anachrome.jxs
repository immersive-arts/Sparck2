<jittershader name="map">
	<description>
		anaglyph shader for anachrome filters
		by Martin Froehlich for tecartlab.com
		based on code by http://iaian7.com/quartz/AnaglyphCompositing
	</description>

	<param name="Contrast" type="float" default="0.4">
		<description>Contrast amount</description>
	</param>
	<param name="Deghost" type="float" default="0.6">
		<description>Deghost amount</description>
	</param>
	<param name="Stereo" type="float" default="0. 0." >
		<description>Stereo amount</description>
	</param>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.0">
		<bind param="Contrast" program="fp" />
		<bind param="Deghost" program="fp" />
		<bind param="Stereo" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

//setup for 2 texture
varying vec2 texcoord0;
varying vec2 texcoord1;
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;

//wipe state
uniform float Contrast;
uniform float Deghost;
uniform float Stereo;

vec4 accum;
vec4 fragment;
float contrast;
float l1;
float l2;
float r1;
float r2;
float deghost;

void main()
{

	vec2 stereo = vec2(Stereo * 50.0, 0.);
	accum;
	fragment = vec4(1.0,1.0,1.0,1.0);
	contrast = (Contrast*0.5)+0.5;
	l1 = contrast*0.45;
	l2 = (1.0-l1)*0.5;
	r1 = contrast;
	r2 = 1.0-r1;
	deghost = Deghost*0.1;

	accum = clamp(texture2DRect(tex0, texcoord0.st+stereo)*vec4(l1,l2,l2,1.0),0.0,1.0);
	fragment.r = pow(accum.r+accum.g+accum.b, 1.00);
	fragment.a = accum.a;

	accum = clamp(texture2DRect(tex1, texcoord1.st-stereo)*vec4(r2,r1,0.0,1.0),0.0,1.0);
	fragment.g = pow(accum.r+accum.g+accum.b, 1.15);
	fragment.a = fragment.a+accum.a;

	accum = clamp(texture2DRect(tex1, texcoord1.st-stereo)*vec4(r2,0.0,r1,1.0),0.0,1.0);
	fragment.b = pow(accum.r+accum.g+accum.b, 1.15);
	fragment.a = (fragment.a+accum.a)/3.0;

	accum = fragment;
	fragment.r = (accum.r+(accum.r*(deghost))+(accum.g*(deghost*-0.5))+(accum.b*(deghost*-0.5)));
	fragment.g = (accum.g+(accum.r*(deghost*-0.25))+(accum.g*(deghost*0.5))+(accum.b*(deghost*-0.25)));
	fragment.b = (accum.b+(accum.r*(deghost*-0.25))+(accum.g*(deghost*-0.25))+(accum.b*(deghost*0.5)));

	// output texture
	gl_FragColor =  fragment;
}
]]>
		</program>
	</language>
</jittershader>
