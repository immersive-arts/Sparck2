<jittershader name="cartopol">
	<description>
	/*******************************************************************************
	* SSAO
	*
	* Adapted for Jitter by maybites (http://maybites.ch)
	*
	* from http://devlog-martinsh.blogspot.ch/2011/10/nicer-ssao.html
	*
	*******************************************************************************/
	</description>
	<param name="near_clip" type="float" default="1.0" />
	<param name="far_clip" type="float" default="3.0" />
	<param name="bgl_RenderedTextureHeight" type="float" default="1.0" />
	<param name="bgl_RenderedTextureWidth" type="float" default="1.0" />
	<param name="bgl_DepthTexture" type="int" default="0" />
	<param name="bgl_RenderedTexture" type="int" default="1" />

	<language name="glsl" version="1.0">
		<bind param="near_clip" program="fp" />
		<bind param="far_clip" program="fp" />
		<bind param="bgl_RenderedTextureHeight" program="fp" />
		<bind param="bgl_RenderedTextureWidth" program="fp" />
		<bind param="bgl_RenderedTexture" program="fp" />
		<bind param="bgl_DepthTexture" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

// MIT License
// Martin Froehlich for tecartlab.com
// Copyright 2020 - tecartlab.com

varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texdim0;
varying vec2 texdim1;

void main()
{
    // perform standard transform on vertex
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

    // transform texcoords
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    // extract the x and y scalars from the texture matrix to determine dimensions
    texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

uniform sampler2DRect bgl_DepthTexture;
uniform sampler2DRect bgl_RenderedTexture;
uniform float bgl_RenderedTextureWidth;
uniform float bgl_RenderedTextureHeight;
uniform float near_clip;
uniform float far_clip;

#define PI    3.14159265

varying vec2 texcoord0;
varying vec2 texcoord1;
varying vec2 texdim0;
varying vec2 texdim1;

//float width = bgl_RenderedTextureWidth; //texture width
//float height = bgl_RenderedTextureHeight; //texture height

float width = texdim0.x; //texture width
float height = texdim0.y; //texture height

#define PI    3.14159265

//------------------------------------------
//general stuff

//make sure that these two values are the same for your camera, otherwise distances will be wrong.

float znear = near_clip; //Z-near
float zfar = far_clip; //Z-far

//------------------------------------------
//general stuff

//user variables
int samples = 8; //ao sample count

float radius = 12.0; //ao radius
float aoclamp = 0.25; //depth clamp - reduces haloing at screen edges

float diffarea = 0.4; //self-shadowing reduction
float gdisplace = 0.5; //gauss bell center


//--------------------------------------------------------

vec2 rand(vec2 coord) //generating noise/pattern texture for dithering
{
	float noiseX = ((fract(1.0-coord.s*(width/2.0))*0.25)+(fract(coord.t*(height/2.0))*0.75));
	float noiseY = ((fract(1.0-coord.s*(width/2.0))*0.75)+(fract(coord.t*(height/2.0))*0.25));

	return clamp(vec2(noiseX,noiseY)*2.0-1.0,-1.0,1.0);
}


float readDepth(in vec2 coord)
{
	if (texcoord0.x<0.0 || texcoord0.y<0.0) return 1.0;
//	return (2.0 * znear) / (zfar + znear - texture2DRect(bgl_DepthTexture, coord ).x * (zfar-znear));
//	return (- 2.0 * zfar * znear) / (zfar - znear) / (texture2DRect(bgl_DepthTexture, coord).x - (zfar + znear) / (zfar - znear));
	return -(texture2DRect(bgl_DepthTexture, coord).x * (zfar - znear) + znear);
}

float compareDepths(in float depth1, in float depth2,inout int far)
{
	float garea = 2.0; //gauss bell width
	float diff = (depth1 - depth2)*100.0; //depth difference (0-100)
	//reduce left bell width to avoid self-shadowing
	if (diff<gdisplace)
	{
	garea = diffarea;
	}else{
	far = 1;
	}

	float gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));
	return gauss;
}

float calAO(float depth,float dw, float dh)
{
	float dd = (1.0-depth)*radius;

	float temp = 0.0;
	float temp2 = 0.0;
	float coordw = texcoord0.x + dw*dd;
	float coordh = texcoord0.y + dh*dd;
	float coordw2 = texcoord0.x - dw*dd;
	float coordh2 = texcoord0.y - dh*dd;

	vec2 coord = vec2(coordw , coordh);
	vec2 coord2 = vec2(coordw2, coordh2);

	int far = 0;
	temp = compareDepths(depth, readDepth(coord),far);
	//DEPTH EXTRAPOLATION:
	if (far > 0)
	{
		temp2 = compareDepths(readDepth(coord2),depth,far);
		temp += (1.0-temp)*temp2;
	}

	return temp;
}

void main(void)
{
	vec2 dither = rand(texcoord0);
	float depth = readDepth(texcoord0);

	float w = (1.0 / width)/clamp(depth,aoclamp,1.0)*dither.x;
	float h = (1.0 / height)/clamp(depth,aoclamp,1.0)*dither.y;

	float pw;
	float ph;

	float ao;

	float dl = PI*(3.0-sqrt(5.0));
	float dz = 1.0/float(samples);
	float l = 0.0;
	float z = 1.0 - dz/2.0;

	for (int i = 0; i <= samples; i ++)
	{
		float r = sqrt(1.0-z);

		pw = cos(l)*r;
		ph = sin(l)*r;
		ao += calAO(depth,pw*w,ph*h);
		z = z - dz;
		l = l + dl;
	}

	ao /= float(samples);
	ao = 1.0-ao;

	vec3 color = texture2DRect(bgl_RenderedTexture,texcoord0).rgb;

	gl_FragColor = vec4(ao, ao, ao, ao);
//	gl_FragColor = vec4(color,ao);

}

]]>
		</program>
	</language>
</jittershader>
